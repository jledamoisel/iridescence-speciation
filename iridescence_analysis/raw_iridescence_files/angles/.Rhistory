# identify the 95% percentile
my_threshold35 <- quantile(fst35$WEIR_AND_COCKERHAM_FST, 0.975, na.rm = T)
# make an outlier column in the data.frame
fst35 <- fst35 %>% mutate(outlier = ifelse(WEIR_AND_COCKERHAM_FST > my_threshold35, "outlier", "background"))
fst35 %>% group_by(outlier) %>% tally()
ggplot(fst35, aes(POS, WEIR_AND_COCKERHAM_FST, colour = outlier)) + geom_point()
sessionInfo()
install.packages(c("Rserve", "ptw", "gplots", "baseline", "hyperSpec", "ggplot2","boot"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages(c("Rserve", "ptw", "gplots", "baseline", "hyperSpec", "ggplot2","boot"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages(c("Rserve", "ptw", "gplots", "baseline", "hyperSpec", "ggplot2","boot"))
install.packages(c("Rserve", "ptw", "gplots", "baseline", "hyperSpec", "ggplot2", "boot"))
install.packages(c("Rserve", "ptw", "gplots", "baseline", "hyperSpec", "ggplot2", "boot"))
install.packages(c("Rserve", "ptw", "gplots", "baseline", "hyperSpec", "ggplot2", "boot"))
install.packages("BiocManager")
BiocManager::install()
rm(list=ls())
setwd("C:/Users/plinchamps01/Desktop/Josephine/PAML")
LRT_formula<- function (lnL1, lnL2, df)#lnL2=modele nul, lnL1=modele test
{
LRT <- 2*(lnL1-lnL2)
pval<- pchisq(LRT, df, lower.tail=FALSE)
my_list<-list("LRT"=LRT,"pval"=pval)
return(my_list)
}
LRT_formula(lnL1 =-12131.168362, lnL2 =-12131.394922, df=1)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
setwd("C:/Users/plinchamps01/Desktop/THESE2/SPECTRO/angles")
rm(list=ls())
setwd("C:/Users/plinchamps01/Desktop/THESE2/SPECTRO/angles")
library(pavo)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rptR)
library(lme4)
library(Matrix)
library(magrittr)
library(purrr)
library(listviewer)
library(repurrrsive)
library(tidyr)
library(tibble)
library(data.table)
library(stats)
library(reshape2)
library(cluster)
library(devtools)
library(ggfortify)
library(devtools)
library(factoextra)
library(mvnormtest)
library(vegan)
library(pairwiseAdonis)
extract_repet <- function(angle)
#' calculates repeatability per individual for 1 angle
#' and saves it in a data frame
#'
#' angle = enter angle type as written in ID, must be a character entry
#'
#' ex : extract_repet('_15A_')
#'
#' REQUIRED PACKAGES : tidyverse, dplyr, rptR, tidyr
#'
{
angle_type=angle
#1
#create a dataframe with the selected angle
dataX<-data_complet %>%
filter(grepl(angle_type, ID))
#2
#measure the repeatability per individual for the variable Chroma
rptChroma<-rpt(Chroma ~ (1 | indiv), grname = "indiv", data = dataX, datatype = "Gaussian", nboot = 500)
#measure the repeatability per individual for the variable Brightness
rptBrightness<-rpt(Brightness ~ (1 | indiv), grname = "indiv", data = dataX, datatype = "Gaussian", nboot = 500)
#measure the repeatability per individual for the variable Hue
rptHue<-rpt(Hue ~ (1 | indiv), grname = "indiv", data = dataX, datatype = "Gaussian", nboot = 500)
#3
#extract the rptChroma list results in a Chroma_list object
sum_Chroma = unlist(rptChroma)
Chroma_list<-sum_Chroma[c("R.indiv","se.se","CI_emp.2.5%","CI_emp.97.5%","P.LRT_P")]
#extract the rptBrightness list results in a Brightness_list object
sum_Brightness = unlist(rptBrightness)
Brightness_list<-sum_Brightness[c("R.indiv","se.se","CI_emp.2.5%","CI_emp.97.5%","P.LRT_P")]
#extract the rptHue list results in a Hue_list object
sum_Hue = unlist(rptHue)
Hue_list<-sum_Brightness[c("R.indiv","se.se","CI_emp.2.5%","CI_emp.97.5%","P.LRT_P")]
#4
#set Chroma_list as dataframe and add Variable column
Chroma_df1<-data.frame(Chroma_list)
Chroma_df<-Chroma_df1 %>%
mutate(Variable='Chroma')
#set Brightness_list as dataframe
Brightness_df1<-data.frame(Brightness_list)
Brightness_df<-Brightness_df1 %>%
mutate(Variable='Brightness')
#set Hue_list as dataframe
Hue_df1<-data.frame(Hue_list)
Hue_df<-Hue_df1 %>%
mutate(Variable='Hue')
#5
#merge all dataframes together
Repet_df1<-bind_rows(Chroma_df, Brightness_df)
Repet_df<-bind_rows(Repet_df1, Hue_df)
#rename columns
Repet_df_rename<-Repet_df %>%
rename("R"="R.indiv",
"SE"="se.se",
"Emp.2.5%"="CI_emp.2.5.",
"Emp.97.5%"="CI_emp.97.5.",
"P-value"="P.LRT_P",
"Variable"="Variable")
#add angle ID column
Repet_df_final<-Repet_df_rename %>%
mutate(Angle_ID=angle_type)
return(Repet_df_final)
}
PCA_repet<-function(angle)
#' Quick function to generate repeatability PCA plot
#'
#' angle = enter angle type as mentionned in the data_acp_total colomns
#'
#' example : PCA_repet(".15A")
#'
#' REQUIRED PACKAGES : tidyverse, dplyr, tidyr, devtools, ggfortify
{
## Define angleX vector
angleX=angle
## Select the angle to test for repeatability in the complet dataset of wavelengths
data_acp_X<-data_acp_total %>%
select(ends_with(angleX))
## Select only the numerical data for the PCA
data_acp_X_numerical<-data_acp_X %>%
select_if(is.numeric)
## Compute PCA
res_pca_spec<-prcomp(data_acp_X_numerical, scale=TRUE)
## Plot PCA
plotPCA<-autoplot(res_pca_spec, data = data_acp_total,frame=TRUE, colour="indiv",size=4,
scale=0)+theme_classic()
return(plotPCA)
}
extract_coordinates<-function(pca_data)
#' Quick function to extract PCA coordinates
#'
#' pca_data = enter the name of a prcomp object
#'
#' example : extract_coordinates(pca_guiana)
#'
#' REQUIRED PACKAGES : tidyverse, dplyr, tidyr, devtools, ggfortify
{
res_pca=pca_data
## Exctract the PCA coordinates
ind <- get_pca_ind(res_pca)
head(ind$coord)
## Create a data frame with the coordinates per individual
coord<-data.frame(ind$coord)
## Select the 10 first dimensions (where strongest signal lies)
coord<-coord %>%
select(Dim.1:Dim.10)
## Add the qualitative variables back
coord_acp1<-data.frame(cbind(coord,Population,Espece,Localite,Indiv))
return(coord_acp1)
}
###get data
###from 320nm to 700nm for the analysis of Brightness, Hue, Chroma
specs <- getspec("C:/Users/plinchamps01/Desktop/THESE2/Spectro/angles", #data location
ext = "rfl8", #data format
decimal = ",",
subdir = TRUE,
subdir.names = FALSE,
lim = c(320, 700)) #spectra dimensions
###smooth the data
data_smooth<-procspec(specs, opt="smooth", span =0.2)
###extract brigthness, chroma, hue
data<-summary(data_smooth, subset=TRUE)
#first column ID
data<-tibble::rownames_to_column(data, "ID")
###create complet detailed dataframe
data_complet<-data %>%
mutate (repet = case_when (
grepl("_repetA", ID)~"A",
grepl("_repetB", ID)~"B",
grepl("_repetC", ID)~"C")) %>%
mutate(species=case_when (
grepl("_HB_", ID)~"bristowi",
grepl("_HT_", ID)~"theodorus",
grepl("_HEL_", ID)~"helenor",
grepl("_ACH_", ID)~"achilles")) %>%
mutate(location=case_when (
grepl("PA23_", ID)~"ecuador",
grepl("FG23_", ID)~"french_guiana")) %>%
mutate(sex=case_when (
grepl("_F_", ID)~"female",
grepl("_M_", ID)~"male")) %>%
mutate(angle=case_when (
grepl("_0_", ID)~"0",
grepl("_15A_", ID)~"15",
grepl("_15E_", ID)~"15",
grepl("_15I_", ID)~"15",
grepl("_15P_", ID)~"15",
grepl("_30A_", ID)~"30",
grepl("_30E_", ID)~"30",
grepl("_30I_", ID)~"30",
grepl("_30P_", ID)~"30",
grepl("_30A1_", ID)~"30",
grepl("_30E1_", ID)~"30",
grepl("_30I1_", ID)~"30",
grepl("_30P1_", ID)~"30",
grepl("_30Am1_", ID)~"30",
grepl("_30Em1_", ID)~"30",
grepl("_30Im1_", ID)~"30",
grepl("_30Pm1_", ID)~"30",
grepl("_45A_", ID)~"45",
grepl("_45E_", ID)~"45",
grepl("_45I_", ID)~"45",
grepl("_45P_", ID)~"45")) %>%
mutate(angle_detail=case_when (
grepl("_0_", ID)~"0",
grepl("_15A_", ID)~"15A",
grepl("_15E_", ID)~"15E",
grepl("_15I_", ID)~"15I",
grepl("_15P_", ID)~"15P",
grepl("_30A_", ID)~"30A",
grepl("_30E_", ID)~"30E",
grepl("_30I_", ID)~"30I",
grepl("_30P_", ID)~"30P",
grepl("_30A1_", ID)~"30A1",
grepl("_30E1_", ID)~"30E1",
grepl("_30I1_", ID)~"30I1",
grepl("_30P1_", ID)~"30P1",
grepl("_30Am1_", ID)~"30Am1",
grepl("_30Em1_", ID)~"30Em1",
grepl("_30Im1_", ID)~"30Im1",
grepl("_30Pm1_", ID)~"30Pm1",
grepl("_45A_", ID)~"45A",
grepl("_45E_", ID)~"45E",
grepl("_45I_", ID)~"45I",
grepl("_45P_", ID)~"45P")) %>%
mutate(side=case_when (
grepl("_0_", ID)~"zero",
grepl("A_", ID)~"anterieur",
grepl("A1_", ID)~"anterieur",
grepl("Am1_", ID)~"anterieur",
grepl("P_", ID)~"posterieur",
grepl("P1_", ID)~"posterieur",
grepl("Pm1_", ID)~"posterieur",
grepl("E_", ID)~"exterieur",
grepl("E1_", ID)~"exterieur",
grepl("Em1_", ID)~"exterieur",
grepl("I_", ID)~"interieur",
grepl("I1_", ID)~"interieur",
grepl("Im1_", ID)~"interieur",)) %>%
rename(Brightness = B2) %>%
rename(Chroma = S8) %>%
rename(Hue = H1)
###create population variable
data_complet<-data_complet %>% unite("population", species:sex, remove=F)
###numerate individuals
y<-rep(c(1:80),each=3, times=21)
data_complet<-data_complet %>% mutate(indiv=y)
data_complet$indiv<-as.character(data_complet$indiv)
View(data_complet)
### Plots
p<-ggplot(data_complet, aes(x=angle, y=Bightness, color=population)) +
geom_boxplot()
p
### Plots
p<-ggplot(data_complet, aes(x=angle, y=Brightness, color=population)) +
geom_boxplot()
p
### Plots
p<-ggplot(data_complet, aes(x=angle_detail, y=Brightness, color=population)) +
geom_boxplot()
### Plots
ggplot(data_complet, aes(x=angle_detail, y=Brightness, color=population)) +
geom_boxplot()
### Plots
ggplot(data_complet, aes(x=angle_detail, y=Brightness, color=population)) +
geom_boxplot()+ theme_classic()
### Plots
ggplot(data_complet, aes(x=angle_detail, y=Brightness)) +
geom_violin(trim = FALSE)+
geom_jitter(position=position_jitter(0.2))
### Plots
ggplot(data_complet, aes(x=angle_detail, y=Brightness)) +
geom_violin(trim = FALSE)+
geom_jitter(position=position_jitter(0.2))+ theme_classic()
### Plots
ggplot(data_complet, aes(x=angle_detail, y=Brightness)) +
geom_violin(trim = FALSE)+
geom_jitter(position=position_jitter(0.2))+ theme_classic()+
geom_point(aes(col=population))
### Plots
ggplot(data_complet, aes(x=angle_detail, y=Brightness, color=population)) +
geom_violin(trim = FALSE)+
geom_jitter(position=position_jitter(0.2))+ theme_classic()
### Plots
ggplot(data_complet, aes(x=angle_detail, y=Brightness, color=population)) +
geom_violin(trim = FALSE)+
geom_jitter()+ theme_classic()
### Plots
bxp1i<-ggboxplot(
data_complet, x="angle_detail", y="Brightness", color="population", palette="jco", facet.by="Country"
)
library(ggpubr)
### Plots
bxp1i<-ggboxplot(
data_complet, x="angle_detail", y="Brightness", color="population", palette="jco", facet.by="Country"
)
bxp1i
### Plots
bxp1i<-ggboxplot(
data_complet, x="angle_detail", y="Brightness", color="population", palette="jco", facet.by="location"
)
bxp1i
### Plots
bxp1i<-ggboxplot(
data_complet, x="angle_detail", y="Brightness", palette="jco", facet.by="location"
)
bxp1i
### Plots
bxp1i<-ggboxplot(
data_complet, x="angle_detail", y="Brightness", palette="jco"
)
bxp1i
### Plots
bxp1i<-ggboxplot(
data_complet, x="angle_detail", y="Hue", palette="jco"
)
bxp1i
data %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9)
library(ggplot2)
data %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9)
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9)
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_jitter(color=population, size=0.4, alpha=0.9)
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness, color=population)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9)
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness, color=population)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.5)
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness, color=population)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.1)
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness, color=population)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.5)
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness, color=population)) +
geom_boxplot() +theme_classic()
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +theme_classic()
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(colour = population)+theme_classic()
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = population))+theme_classic()
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = population,position = position_jitterdodge()))+theme_classic()
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = population),position = position_jitterdodge())+theme_classic()
data_complet %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = population),position = position_jitterdodge())+theme_classic()+
facet_grid(location ~ .)
##create species/sex variable
data_complet_test<-data_complet %>%unite(col='sex_species', c('species', 'sex'), sep='_')
View(data_complet_test)
##create species/sex variable
data_complet_test<-data_complet %>%unite(col='sex_species', c('species', 'sex'), sep='_', remove=F)
View(data_complet_test)
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = population),position = position_jitterdodge())+theme_classic()+
facet_grid(sex_species ~ .)
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = sex_species),position = position_jitterdodge())+theme_classic()+
facet_grid(location ~ .)
sex_species$data_complet_test<-factor(sex_species$data_complet_test, levels=c("bristowi_female","bristowi_male", "theodorus_female", "theodorus_male", "achilles_female", "achilles_male", "helenor_female", "helenor_male"))
View(data_complet_test)
sex_species$data_complet_test<-factor(sex_species$data_complet_test, levels=c("bristowi_female","bristowi_male", "theodorus_female", "theodorus_male", "achilles_female", "achilles_male", "helenor_female", "helenor_male"))
levels(sex_species$data_complet_test)
sex_species$data_complet_test<-factor(sex_species$data_complet_test, levels=c("bristowi_female","bristowi_male", "theodorus_female", "theodorus_male", "achilles_female", "achilles_male", "helenor_female", "helenor_male"))
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = sex_species),position = position_jitterdodge())+theme_classic()+
facet_grid(location ~ .)
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = "darkolivegreen2","#339933","#CC99FF","#660099","#33CCFF","#3333FF","#FF9966","#CC3333"),position = position_jitterdodge())+theme_classic()+
facet_grid(location ~ .)
geom_point(aes(colour = c("darkolivegreen2","#339933","#CC99FF","#660099","#33CCFF","#3333FF","#FF9966","#CC3333"),position = position_jitterdodge())+theme_classic()+
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = c("darkolivegreen2","#339933","#CC99FF","#660099","#33CCFF","#3333FF","#FF9966","#CC3333")),position = position_jitterdodge())+theme_classic()+
facet_grid(location ~ .)
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = c("darkolivegreen2","#339933","#CC99FF","#660099","#33CCFF","#3333FF","#FF9966","#CC3333")),position = position_jitterdodge())+theme_classic()+
facet_grid(location ~ .)
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = population),position = position_jitterdodge())+theme_classic()+
facet_grid(location ~ .)
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = sex_species),position = position_jitterdodge())+theme_classic()+
+
scale_color_manual(values=c("darkolivegreen2","#339933","#CC99FF","#660099","#33CCFF","#3333FF","#FF9966","#CC3333"))
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = sex_species),position = position_jitterdodge())+theme_classic()+
+
scale_color_manual(values=c("achilles_female"="darkolivegreen2","achilles_male"="#339933","birstowi_female"="#CC99FF","bristowi_male"="#660099","helenor_female"="#33CCFF","helenor_male"="#3333FF","theodorus_female"="#FF9966","theodorus_male"="#CC3333"))
+scale_color_manual(values=c("achilles_female"="darkolivegreen2","achilles_male"="#339933","birstowi_female"="#CC99FF","bristowi_male"="#660099","helenor_female"="#33CCFF","helenor_male"="#3333FF","theodorus_female"="#FF9966","theodorus_male"="#CC3333"))
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = sex_species),position = position_jitterdodge())+theme_classic()+scale_color_manual(values=c("achilles_female"="darkolivegreen2","achilles_male"="#339933","birstowi_female"="#CC99FF","bristowi_male"="#660099","helenor_female"="#33CCFF","helenor_male"="#3333FF","theodorus_female"="#FF9966","theodorus_male"="#CC3333"))+facet_grid(location ~ .)
data_complet_test %>% ggplot( aes(x=angle_detail, y=Brightness)) +
geom_boxplot() +
geom_point(aes(colour = sex_species),position = position_jitterdodge())+theme_classic()+scale_color_manual(values=c("achilles_female"="darkolivegreen2","achilles_male"="#339933","bristowi_female"="#CC99FF","bristowi_male"="#660099","helenor_female"="#33CCFF","helenor_male"="#3333FF","theodorus_female"="#FF9966","theodorus_male"="#CC3333"))+facet_grid(location ~ .)
##Hue
data_complet_test %>% ggplot( aes(x=angle_detail, y=Hue)) +
geom_boxplot() +
geom_point(aes(colour = sex_species),position = position_jitterdodge())+theme_classic()+scale_color_manual(values=c("achilles_female"="darkolivegreen2","achilles_male"="#339933","bristowi_female"="#CC99FF","bristowi_male"="#660099","helenor_female"="#33CCFF","helenor_male"="#3333FF","theodorus_female"="#FF9966","theodorus_male"="#CC3333"))+facet_grid(location ~ .)
##Chroma
data_complet_test %>% ggplot( aes(x=angle_detail, y=Chroma)) +
geom_boxplot() +
geom_point(aes(colour = sex_species),position = position_jitterdodge())+theme_classic()+scale_color_manual(values=c("achilles_female"="darkolivegreen2","achilles_male"="#339933","bristowi_female"="#CC99FF","bristowi_male"="#660099","helenor_female"="#33CCFF","helenor_male"="#3333FF","theodorus_female"="#FF9966","theodorus_male"="#CC3333"))+facet_grid(location ~ .)
# GLM Brightness to take into account the indiv random effect
library(DHARMa)
library(lme4)
library(glmmTMB)
View(data_complet)
glmer_brightness <- lmer(Brightness~species*sex+(1|indiv), data=data_complet)
summary(glmer_brightness)
anova(glmer_brightness)
glmer_brightness <- lmer(Brightness~species*sex+(1|indiv), data=data_complet)
anova(glmer_brightness)
glmer_brightness <- lmer(Brightness~species*sex+(1|indiv), data=data_complet, REML=TRUE)
anova(glmer_brightness)
glmer_brightness <- lmer(Brightness~species+sex+(1|indiv), data=data_complet, REML=TRUE)
summary(glmer_brightness)
anova(glmer_brightness)
install.packages("lmerTest")
library(lmerTest)
glmer_brightness <- lmer(Brightness~species+sex+(1|indiv), data=data_complet, REML=TRUE)
glmer_brightness <- lmer(Brightness~species+sex+(1|indiv), data=data_complet)
anova(glmer_brightness)
glmer_brightness <- lmer(Brightness~species*sex+angle_detail+(1|indiv), data=data_complet)
anova(glmer_brightness)
glmer_brightness <- lmer(Brightness~species*sex+angle_detail+location+(1|indiv), data=data_complet)
anova(glmer_brightness)
glmer_brightness <- lmer(Brightness~species*sex+angle_detail+(1|indiv), data=data_complet)
anova(glmer_brightness)
glmer_brightness <- lmer(Brightness~species*sex+angle_detail, data=data_complet)
install.packages("multcomp")
library(multcomp)
summary(glmer_brightness)
anova(glmer_brightness)
summary(glmer_brightness)
vcov(glmer_brightness)
anova(glmer_brightness)
summary(glmer_brightness)
res.aov <- aov(Brightness ~ species*sex+angle_detail, data = data_complet)
summary(res.aov)
glmer_brightness <- lmer(Brightness~species*sex+angle_detail+(1|indiv), data=data_complet)
summary(glmer_brightness)
glmer_hue <- lmer(Hue~species*sex+angle_detail+(1|indiv), data=data_complet)
summary(glmer_hue)
anova(glmer_hue)
glmer_chroma <- lmer(Chroma~species*sex+angle_detail+(1|indiv), data=data_complet)
summary(glmer_chroma)
anova(glmer_chroma)
testDispersion(glmer_brightness)
simulationOutput <- simulateResiduals(fittedModel = glmer_brightness, plot = F)
residuals(simulationOutput)
residuals(simulationOutput, quantileFunction = qnorm, outlierValues = c(-7,7))
plot(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)
testOutliers(simulationOutput)
testDispersion(glmer_hue)
simulationOutput <- simulateResiduals(fittedModel = glmer_brightness, plot = F)
residuals(simulationOutput)
residuals(simulationOutput, quantileFunction = qnorm, outlierValues = c(-7,7))
plot(simulationOutput)
simulationOutput <- simulateResiduals(fittedModel = glmer_hue, plot = F)
residuals(simulationOutput)
residuals(simulationOutput, quantileFunction = qnorm, outlierValues = c(-7,7))
plot(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)
testOutliers(simulationOutput)
